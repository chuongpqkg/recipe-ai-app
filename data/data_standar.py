import pandas as pd
import re
import unicodedata

# B∆∞·ªõc 1: Load d·ªØ li·ªáu
df = pd.read_csv("mon_an.csv")

# B∆∞·ªõc 2: X√≥a "Mu·ªóng; Gram;" trong c·ªôt Nguy√™n li·ªáu
df["Nguy√™n li·ªáu"] = df["Nguy√™n li·ªáu"].str.replace(r"^(Mu·ªóng;)?\s*(Gram;)?", "", regex=True).str.strip()

# B∆∞·ªõc 3: H√†m t√°ch n·ªôi dung "C√°ch l√†m" th√†nh 3 ph·∫ßn: S∆° ch·∫ø, Th·ª±c hi·ªán, C√°ch d√πng
def tach_cach_lam(text):
    if pd.isna(text):
        return "", "", ""

    # Chu·∫©n h√≥a vƒÉn b·∫£n ƒë·ªÉ d·ªÖ x·ª≠ l√Ω
    text = re.sub(r"\s+", " ", text.strip())  # b·ªè c√°c k√Ω t·ª± xu·ªëng d√≤ng th·ª´a
    text = unicodedata.normalize("NFC", text)  # chu·∫©n h√≥a unicode (tr√°nh l·ªói ti·∫øng Vi·ªát)

    # D√πng regex ƒë·ªÉ t√°ch n·ªôi dung
    pattern = r"S∆° ch·∫ø:\s*(.*?)(?=Th·ª±c hi·ªán:|C√°ch d√πng:|$)|Th·ª±c hi·ªán:\s*(.*?)(?=C√°ch d√πng:|$)|C√°ch d√πng:\s*(.*)"
    matches = re.findall(pattern, text, flags=re.IGNORECASE)

    so_che = thuc_hien = cach_dung = ""

    for match in matches:
        if match[0]:
            so_che = match[0].strip()
        if match[1]:
            thuc_hien = match[1].strip()
        if match[2]:
            cach_dung = match[2].strip()

    return so_che, thuc_hien, cach_dung
# √Åp d·ª•ng x·ª≠ l√Ω cho to√†n b·ªô d·ªØ li·ªáu t√°ch 3 c·ªôt
df[["So_che", "Thuc_hien", "Cach_dung"]] = df["C√°ch l√†m"].apply(lambda x: pd.Series(tach_cach_lam(x)))

# B∆∞·ªõc 3: X√≥a d√≤ng d·ªØ li·ªáu b·ªã tr√πngtrong 3 ph·∫ßn: S∆° ch·∫ø, Th·ª±c hi·ªán, C√°ch d√πng
def chuan_hoa_cau(cau):
    # Chu·∫©n h√≥a unicode, lowercase, b·ªè d·∫•u c√¢u ƒë·ªÉ d·ªÖ ph√°t hi·ªán tr√πng
    cau = unicodedata.normalize("NFC", cau)
    cau = cau.lower().strip()
    cau = re.sub(r'[^\w\s]', '', cau)  # b·ªè d·∫•u c√¢u
    cau = re.sub(r'\s+', ' ', cau)
    return cau

def xoa_cau_trung_lap(text):
    if pd.isna(text):
        return ""

        # T√°ch c√¢u theo d·∫•u k·∫øt th√∫c
    cau_list = re.split(r'(?<=[.!?])\s+', text.strip())

    cau_goc_khac_nhau = []
    cau_chuan_set = set()

    for cau in cau_list:
        cau_goc = cau.strip()
        cau_chuan = chuan_hoa_cau(cau_goc)

        if cau_chuan and cau_chuan not in cau_chuan_set:
            cau_chuan_set.add(cau_chuan)
            cau_goc_khac_nhau.append(cau_goc)

    return " ".join(cau_goc_khac_nhau)

# X√≥a d li·ªáu tr√πng l·∫∑p ·ªü 3 c·ªôt
df["So_che"] = df["So_che"].apply(xoa_cau_trung_lap)
df["Thuc_hien"] = df["Thuc_hien"].apply(xoa_cau_trung_lap)
df["Cach_dung"] = df["Cach_dung"].apply(xoa_cau_trung_lap)


# B∆∞·ªõc 4: C·ªôt Th·ª±c hi·ªán t√°c c√°c b∆∞·ªõc cho d·ªÖ nh√¨n
def dinh_dang_thuc_hien(text):
    if pd.isna(text):
        return ""

    # ƒê·∫£m b·∫£o m·ªói "B∆∞·ªõc X" ƒë·ªÅu b·∫Øt ƒë·∫ßu t·ª´ d√≤ng m·ªõi
    text = re.sub(r"\s*(B∆∞·ªõc\s*\d+[\.:])", r"\n\1", text, flags=re.IGNORECASE)

    # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng d∆∞ th·ª´a v√† chu·∫©n h√≥a kho·∫£ng c√°ch gi·ªØa c√°c b∆∞·ªõc
    dong = text.strip().split("\n")
    ket_qua = []

    for d in dong:
        dong_sach = d.strip()
        if dong_sach:
            ket_qua.append(dong_sach)

    # C√°ch m·ªói b∆∞·ªõc 1 d√≤ng tr·∫Øng
    return "\n\n".join(ket_qua)
# T√°ch c√°c b∆∞·ªõc 1,2,3 th√†nh ƒëo·∫°n
df["Thuc_hien"] = df["Thuc_hien"].apply(dinh_dang_thuc_hien)
# Xu·∫•t ra DataFrame k·∫øt qu·∫£
df_nguyen_lieu = pd.DataFrame(df)
# L∆∞u k·∫øt qu·∫£ s·∫°ch th√†nh file m·ªõi,Xu·∫•t l·∫°i file CSV v·ªõi m√£ h√≥a ƒë√∫ng
df.to_csv("nguyen_lieu_sach.csv", index=False, encoding='utf-8-sig')
print("‚úÖ ƒê√£ xu·∫•t file nguyen_lieu_sach.csv v·ªõi m√£ h√≥a utf-8-sig (h·ªó tr·ª£ ti·∫øng Vi·ªát trong Excel)")


# B∆∞·ªõc 5: T√°ch nguy√™n li·ªáu th√†nh d√≤ng d·∫°ng: T√™n nguy√™n li·ªáu | S·ªë l∆∞·ª£ng | ƒê∆°n v·ªã
def tach_nguyen_lieu(text):
    if pd.isna(text):
        return []

    # Chu·∫©n h√≥a
    text = unicodedata.normalize("NFC", str(text)).strip()
    text = text.replace("1/2", "0.5").replace("3/4", "0.75")
    text = re.sub(r'\s+', ' ', text)

    # T√°ch nguy√™n li·ªáu theo d·∫•u ;
    nglieu_raw = re.split(r';\s*', text)
    ket_qua = []
    seen = set()

    for item in nglieu_raw:
        item = item.strip()
        if not item:
            continue

        item_clean = re.sub(r'\([^)]*\)', '', item).strip()

        # Regex t√¨m s·ªë l∆∞·ª£ng v√† ƒë∆°n v·ªã
        match = re.match(r'^(.*?)(\d+[,\.]?\d*)\s*([a-zA-Z√Ä-·ªπ√†-·ªπŒº¬µgGmMlL√≠t√≠tM]*)$', item_clean)
        if match:
            ten = match.group(1).strip(" :")
            sl = match.group(2)
            dv = match.group(3).strip()
            if not dv:
                dv = "l∆∞·ª£ng v·ª´a ƒë·ªß"
        else:
            # N·∫øu kh√¥ng b·∫Øt ƒë∆∞·ª£c s·ªë, g√°n s·ªë l∆∞·ª£ng = 1, ƒë∆°n v·ªã = l∆∞·ª£ng v·ª´a ƒë·ªß
            ten = item_clean.strip()
            sl = "1"
            dv = "l∆∞·ª£ng v·ª´a ƒë·ªß"

        key = ten.lower()
        if key not in seen:
            ket_qua.append({
                "T√™n nguy√™n li·ªáu": ten,
                "S·ªë l∆∞·ª£ng": sl,
                "ƒê∆°n v·ªã": dv
            })
            seen.add(key)

    return ket_qua

def tach_nguyen_lieu_dong_don(text):
    if pd.isna(text):
        return ""

    # Chu·∫©n h√≥a vƒÉn b·∫£n
    text = unicodedata.normalize("NFC", str(text))
    text = re.sub(r"\s+", " ", text)

    # T√°ch nguy√™n li·ªáu th√†nh d√≤ng theo d·∫•u . ; ho·∫∑c xu·ªëng d√≤ng
    lines = re.split(r"[;\.\n\r]+", text)

    result_lines = []
    seen = set()

    for line in lines:
        line = line.strip(" .‚Ä¢‚Äì")
        if not line or re.search(r"GIA V·ªä|B·ªÆA|ƒÇN K√àM|TR√ÅNG MI·ªÜNG", line, flags=re.IGNORECASE):
            continue

        # N·∫øu c√≥ d·∫•u : -> t√°ch t√™n v√† ph·∫ßn c√≤n l·∫°i
        if ":" in line:
            parts = line.split(":", 1)
            ten = parts[0].strip()
            con_lai = parts[1].strip()
            line = f"{ten} {con_lai}"

        # B·∫Øt t√™n + s·ªë l∆∞·ª£ng + ƒë∆°n v·ªã + ƒë∆°n v·ªã ph·ª• (n·∫øu c√≥)
        match = re.match(r"^(.*?)(\d+(?:[.,]\d+)?)(?:\s*)([a-zA-Z√Ä-·ªπŒºMmlgG√≠t]+)(?:\s*\(([^)]+)\))?$", line)
        if match:
            ten = match.group(1).strip(" :")
            so_luong = match.group(2).replace(",", ".")
            don_vi = match.group(3).strip()
            don_vi_phu = match.group(4)

            if don_vi_phu:
                line_out = f"{ten} {so_luong}{don_vi} ({don_vi_phu})."
            else:
                line_out = f"{ten} {so_luong}{don_vi}."
        else:
            # N·∫øu kh√¥ng match chu·∫©n, v·∫´n gi·ªØ l·∫°i d√≤ng
            line_out = f"{line}."

        if line_out.lower() not in seen:
            result_lines.append(line_out)
            seen.add(line_out.lower())

    return "\n".join(result_lines)



# Gi·∫£ s·ª≠ b·∫°n ƒë√£ c√≥ DataFrame `df` v√† c·ªôt "Nguy√™n li·ªáu"
ds_nguyen_lieu = df["Nguy√™n li·ªáu"].apply(tach_nguyen_lieu)

# G·ªôp to√†n b·ªô l·∫°i th√†nh b·∫£ng d√†i (m·ªói nguy√™n li·ªáu 1 d√≤ng)
df_nguyen_lieu = pd.DataFrame([row for sublist in ds_nguyen_lieu for row in sublist])

# L∆∞u k·∫øt qu·∫£ s·∫°ch th√†nh file m·ªõi,Xu·∫•t l·∫°i file CSV v·ªõi m√£ h√≥a ƒë√∫ng
df_nguyen_lieu.to_csv("danh_sach_nguyen_lieu.csv", index=False, encoding="utf-8-sig")
print("‚úÖ ƒê√£ xu·∫•t file danh_sach_nguyen_lieu.csv v·ªõi m√£ h√≥a utf-8-sig (h·ªó tr·ª£ ti·∫øng Vi·ªát trong Excel)")
# Th√™m c·ªôt nguy√™n li·ªáu d·∫°ng d√≤ng ƒë∆°n
df["Nguyen_lieu"] = df["Nguy√™n li·ªáu"].apply(tach_nguyen_lieu_dong_don)

# L∆∞u l·∫°i DataFrame ch√≠nh k√®m c·ªôt m·ªõi
df.to_csv("nguyen_lieu_sach.csv", index=False, encoding='utf-8-sig')
print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t v√† l∆∞u th√™m c·ªôt 'Nguyen_lieu_dong_don' v√†o nguyen_lieu_sach.csv")

# ƒê·ªçc file g·ªëc
df1 = pd.read_csv("nguyen_lieu_sach.csv")

def dinh_dang_cach_lam(so_che, thuc_hien, cach_dung):
    buoc_list = []

    if pd.notna(so_che) and so_che.strip().lower() != "kh√¥ng c√≥ n·ªôi dung.":
        buoc_list.append("üîπ S∆° ch·∫ø:\n" + format_thanh_buoc(so_che))

    if pd.notna(thuc_hien) and thuc_hien.strip().lower() != "kh√¥ng c√≥ n·ªôi dung.":
        buoc_list.append("üîπ Th·ª±c hi·ªán:\n" + format_thanh_buoc(thuc_hien))

    if pd.notna(cach_dung) and cach_dung.strip().lower() != "kh√¥ng c√≥ n·ªôi dung.":
        buoc_list.append("üîπ C√°ch d√πng:\n" + format_thanh_buoc(cach_dung))

    return "\n\n".join(buoc_list)


def format_thanh_buoc(text):
    if pd.isna(text):
        return ""

    # N·∫øu text ƒë√£ c√≥ d√≤ng "B∆∞·ªõc 1", "B∆∞·ªõc 2"... th√¨ gi·ªØ nguy√™n c√°ch d√≤ng
    if re.search(r"B∆∞·ªõc\s*\d+", text, flags=re.IGNORECASE):
        text = re.sub(r"\s*(B∆∞·ªõc\s*\d+[\.:]?)", r"\n\1", text, flags=re.IGNORECASE)

    # T√°ch c√¢u theo d·∫•u k·∫øt th√∫c ƒë·ªÉ chia d√≤ng n·∫øu ch∆∞a c√≥ B∆∞·ªõc
    lines = re.split(r'(?<=[.!?])\s+', text.strip())
    lines = [f"- {line.strip()}" for line in lines if line.strip()]
    return "\n".join(lines)

df1["Cach_lam"] = df1.apply(lambda row: dinh_dang_cach_lam(row["So_che"], row["Thuc_hien"], row["Cach_dung"]), axis=1)

# X√≥a 2 c·ªôt "Nguy√™n li·ªáu","C√°ch l√†m", "So_che","Thuc_hien","Cach_dung" n·∫øu t·ªìn t·∫°i
df1 = df1.drop(columns=["Nguy√™n li·ªáu","C√°ch l√†m","So_che","Thuc_hien","Cach_dung"], errors="ignore")
print("‚úÖ ƒê√£ x√≥a 5 c·ªôt 'Nguy√™n li·ªáu', 'C√°ch l√†m' , 'So_che', 'Thuc_hien','Cach_dung' kh·ªèi file nguyen_lieu_sach.csv")
# Ghi l·∫°i file (ghi ƒë√® ho·∫∑c ƒë·∫∑t t√™n m·ªõi)
df1.to_csv("nguyen_lieu_sach2.csv", index=False, encoding="utf-8-sig")
print("‚úÖ ƒê√£ xu·∫•t file danh_sach_nguyen_lieu2.csv v·ªõi m√£ h√≥a utf-8-sig (h·ªó tr·ª£ ti·∫øng Vi·ªát trong Excel)")
